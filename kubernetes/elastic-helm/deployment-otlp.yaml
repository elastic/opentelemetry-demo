default:
  image:
    repository: ghcr.io/elastic/opentelemetry-demo
    tag: 2.0.1
  envOverrides:
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.labels['app.kubernetes.io/component']
    - name: OTEL_K8S_NAMESPACE
      valueFrom:
        fieldRef:
         apiVersion: v1
         fieldPath: metadata.namespace
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: OTEL_K8S_POD_UID
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.uid
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: 'service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)'


opentelemetry-collector:
  image:
    repository: docker.elastic.co/beats/elastic-agent
    tag: 8.17.2
  mode: "deployment"
  useGOMEMLIMIT: false
  resources:
    # The high resource limits set here are due to the usage of the lsminterval processor.
    # The # [LSM Interval Processor](https://github.com/elastic/opentelemetry-collector-components/tree/main/processor/lsmintervalprocessor)
    # aggregates metrics in a db-backed over a defined interval and periodically
    # forwards the latest values to the next component in the pipeline.
    limits:
      cpu: 1500m
      memory: 1500Mi
    requests:
      cpu: 250m
      memory: 1500Mi
  presets:
    kubernetesAttributes:
      enabled: true
    kubernetesEvents:
      enabled: true
    clusterMetrics:
      enabled: true

  extraEnvs:
    - name: ELASTIC_AGENT_OTEL
      value: "true"
    - name: ELASTIC_OTLP_ENDPOINT
      valueFrom:
        secretKeyRef:
          name: elastic-secret-otel
          key: elastic_otlp_endpoint
    - name: ELASTIC_OTLP_TOKEN
      valueFrom:
        secretKeyRef:
          name: elastic-secret-otel
          key: elastic_otlp_token
    - name: GOMAXPROCS
      valueFrom:
        resourceFieldRef:
          resource: limits.cpu
    - name: GOMEMLIMIT
      value: "1025MiB"

  alternateConfig:
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    connectors:
      spanmetrics: {}
      # [Signal To Metrics Connector](https://github.com/elastic/opentelemetry-collector-components/tree/main/connector/signaltometricsconnector)
      signaltometrics: # Produces metrics from all signal types (traces, logs, or metrics).
        logs:
          - name: service_summary
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: metricset.name
                default_value: service_summary
            sum:
              value: "1"
        datapoints:
          - name: service_summary
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: metricset.name
                default_value: service_summary
            sum:
              value: "1"
        spans:
          - name: service_summary
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: metricset.name
                default_value: service_summary
            sum:
              value: Int(AdjustedCount())
          - name: transaction.duration.histogram
            description: APM service transaction aggregated metrics as histogram
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: transaction.root
              - key: transaction.type
              - key: metricset.name
                default_value: service_transaction
              - key: elasticsearch.mapping.hints
                default_value: [_doc_count]
            unit: us
            exponential_histogram:
              value: Microseconds(end_time - start_time)
              max_size: 2
          - name: transaction.duration.summary
            description: APM service transaction aggregated metrics as summary
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: transaction.root
              - key: transaction.type
              - key: metricset.name
                default_value: service_transaction
              - key: elasticsearch.mapping.hints
                default_value: [aggregate_metric_double]
            unit: us
            histogram:
              buckets: [1]
              value: Microseconds(end_time - start_time)
          - name: transaction.duration.histogram
            description: APM transaction aggregated metrics as histogram
            ephemeral_resource_attribute: true
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
              - key: container.id
              - key: k8s.pod.name
              - key: service.version
              - key: service.instance.id # service.node.name
              - key: process.runtime.name # service.runtime.name
              - key: process.runtime.version # service.runtime.version
              - key: telemetry.sdk.version # service.language.version??
              - key: host.name
              - key: os.type # host.os.platform
              - key: faas.instance
              - key: faas.name
              - key: faas.version
              - key: cloud.provider
              - key: cloud.region
              - key: cloud.availability_zone
              - key: cloud.platform # cloud.servicename
              - key: cloud.account.id
            attributes:
              - key: transaction.root
              - key: transaction.name
              - key: transaction.type
              - key: transaction.result
              - key: event.outcome
              - key: metricset.name
                default_value: transaction
              - key: elasticsearch.mapping.hints
                default_value: [_doc_count]
            unit: us
            exponential_histogram:
              value: Microseconds(end_time - start_time)
              max_size: 2
          - name: transaction.duration.summary
            description: APM transaction aggregated metrics as summary
            ephemeral_resource_attribute: true
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
              - key: container.id
              - key: k8s.pod.name
              - key: service.version
              - key: service.instance.id # service.node.name
              - key: process.runtime.name # service.runtime.name
              - key: process.runtime.version # service.runtime.version
              - key: telemetry.sdk.version # service.language.version??
              - key: host.name
              - key: os.type # host.os.platform
              - key: faas.instance
              - key: faas.name
              - key: faas.version
              - key: cloud.provider
              - key: cloud.region
              - key: cloud.availability_zone
              - key: cloud.platform # cloud.servicename
              - key: cloud.account.id
            attributes:
              - key: transaction.root
              - key: transaction.name
              - key: transaction.type
              - key: transaction.result
              - key: event.outcome
              - key: metricset.name
                default_value: transaction
              - key: elasticsearch.mapping.hints
                default_value: [aggregate_metric_double]
            unit: us
            histogram:
              buckets: [1]
              value: Microseconds(end_time - start_time)
          - name: span.destination.service.response_time.sum.us
            description: APM span destination metrics
            ephemeral_resource_attribute: true
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: span.name
              - key: event.outcome
              - key: service.target.type
              - key: service.target.name
              - key: span.destination.service.resource
              - key: metricset.name
                default_value: service_destination
            unit: us
            sum:
              value: Double(Microseconds(end_time - start_time))
          - name: span.destination.service.response_time.count
            description: APM span destination metrics
            ephemeral_resource_attribute: true
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: span.name
              - key: event.outcome
              - key: service.target.type
              - key: service.target.name
              - key: span.destination.service.resource
              - key: metricset.name
                default_value: service_destination
            sum:
              value: Int(AdjustedCount())
          # event.success_count is populated using 2 metric definition with different conditions
          # and value for the histogram bucket based on event outcome. Both metric definition
          # are created using same name and attribute and will result in a single histogram.
          # We use mapping hint of aggregate_metric_double, so, only the sum and the count
          # values are required and the actual histogram bucket is ignored.
          - name: event.success_count
            description: Success count as a metric for service transaction
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: transaction.root
              - key: transaction.type
              - key: metricset.name
                default_value: service_transaction
              - key: elasticsearch.mapping.hints
                default_value: [aggregate_metric_double]
            conditions:
              - attributes["event.outcome"] != nil and attributes["event.outcome"] == "success"
            unit: us
            histogram:
              buckets: [1]
              count: Int(AdjustedCount())
              value: Int(AdjustedCount())
          - name: event.success_count
            description: Success count as a metric for service transaction
            include_resource_attributes:
              - key: service.name
              - key: deployment.environment # service.environment
              - key: telemetry.sdk.language # service.language.name
              - key: agent.name # set via elastictraceprocessor
            attributes:
              - key: transaction.root
              - key: transaction.type
              - key: metricset.name
                default_value: service_transaction
              - key: elasticsearch.mapping.hints
                default_value: [aggregate_metric_double]
            conditions:
              - attributes["event.outcome"] != nil and attributes["event.outcome"] != "success"
            unit: us
            histogram:
              buckets: [0]
              count: Int(AdjustedCount())
              value: Double(0)
    exporters:
      debug: {}
      otlphttp/elastic:
        endpoint: "${env:ELASTIC_OTLP_ENDPOINT}"
        headers:
          Authorization: "ApiKey ${env:ELASTIC_OTLP_TOKEN}"
    processors:
      batch: {}
      batch/metrics:
        # explicitly set send_batch_max_size to 0, as splitting metrics requests may cause version_conflict_engine_exception in TSDB
        send_batch_max_size: 0
        timeout: 1s
      batch/aggs:
        send_batch_size: 16384 # 2x the default
        timeout: 10s
      resource:
        attributes:
          - key: deployment.environment
            value: "opentelemetry-demo"
            action: upsert
      # Transform processor to remove services high cardinality on span names
      transform/services:
        error_mode: ignore
        trace_statements:
          - context: span
            conditions:
              - IsMatch(name, "^[A-Z]+\\s+.+")
            statements:
              - merge_maps(attributes, ExtractPatterns(name, "^(?P<method>\\S+)"), "upsert")
              - set(name, attributes["method"])
      # [Elastic Trace Processor](https://github.com/elastic/opentelemetry-collector-components/tree/main/processor/elastictraceprocessor)
      elastictrace: {} # The processor enriches traces with elastic specific requirements.
      # [LSM Interval Processor](https://github.com/elastic/opentelemetry-collector-components/tree/main/processor/lsmintervalprocessor)
      lsminterval:
        intervals:
          - duration: 1m
            statements:
              - set(resource.attributes["metricset.interval"], "1m")
              - set(attributes["data_stream.dataset"], Concat([attributes["metricset.name"], "1m"], "."))
              - set(attributes["processor.event"], "metric")
          - duration: 10m
            statements:
              - set(resource.attributes["metricset.interval"], "10m")
              - set(attributes["data_stream.dataset"], Concat([attributes["metricset.name"], "10m"], "."))
              - set(attributes["processor.event"], "metric")
          - duration: 60m
            statements:
              - set(resource.attributes["metricset.interval"], "60m")
              - set(attributes["data_stream.dataset"], Concat([attributes["metricset.name"], "60m"], "."))
              - set(attributes["processor.event"], "metric")
      # [Resource Detection Processor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor)
      resourcedetection/eks:
        detectors: [env, eks] # Detects resources from environment variables and EKS (Elastic Kubernetes Service).
        timeout: 15s
        override: true
        eks:
          resource_attributes:
            k8s.cluster.name:
              enabled: true
      resourcedetection/gcp:
        detectors: [env, gcp] # Detects resources from environment variables and GCP (Google Cloud Platform).
        timeout: 2s
        override: true
      resourcedetection/aks:
        detectors: [env, aks] # Detects resources from environment variables and AKS (Azure Kubernetes Service).
        timeout: 2s
        override: true
        aks:
          resource_attributes:
            k8s.cluster.name:
              enabled: true
      # [Resource Processor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourceprocessor)
      resource/k8s: # Resource attributes tailored for services within Kubernetes.
        attributes:
          - key: service.name # Set the service.name resource attribute based on the well-known app.kubernetes.io/name label
            from_attribute: app.label.name
            action: insert
          - key: service.name # Set the service.name resource attribute based on the k8s.container.name attribute
            from_attribute: k8s.container.name
            action: insert
          - key: app.label.name # Delete app.label.name attribute previously used for service.name
            action: delete
          - key: service.version # Set the service.version resource attribute based on the well-known app.kubernetes.io/version label
            from_attribute: app.label.version
            action: insert
          - key: app.label.version # Delete app.label.version attribute previously used for service.version
            action: delete
      resource/hostname:
        attributes:
          - key: host.name
            from_attribute: k8s.node.name
            action: upsert
      # [K8s Attributes Processor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/k8sattributesprocessor)
      k8sattributes:
        passthrough: false # Annotates resources with the pod IP and does not try to extract any other metadata.
        pod_association:
          # Below association takes a look at the k8s.pod.ip and k8s.pod.uid resource attributes or connection's context, and tries to match it with the pod having the same attribute.
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
        extract:
          metadata:
            - "k8s.namespace.name"
            - "k8s.deployment.name"
            - "k8s.replicaset.name"
            - "k8s.statefulset.name"
            - "k8s.daemonset.name"
            - "k8s.cronjob.name"
            - "k8s.job.name"
            - "k8s.node.name"
            - "k8s.pod.name"
            - "k8s.pod.ip"
            - "k8s.pod.uid"
            - "k8s.pod.start_time"
          labels:
            - tag_name: app.label.name
              key: app.kubernetes.io/name
              from: pod
            - tag_name: app.label.version
              key: app.kubernetes.io/version
              from: pod
    receivers:
     # [K8s Objects Receiver](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/k8sobjectsreceiver)
      k8sobjects:
        objects:
          - name: events
            mode: "watch"
            group: "events.k8s.io"
            exclude_watch_type:
              - "DELETED"
      # [K8s Cluster Receiver](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/k8sclusterreceiver)
      k8s_cluster:
        auth_type: serviceAccount # Determines how to authenticate to the K8s API server. This can be one of none (for no auth), serviceAccount (to use the standard service account token provided to the agent pod), or kubeConfig to use credentials from ~/.kube/config.
        node_conditions_to_report:
          - Ready
          - MemoryPressure
        allocatable_types_to_report:
          - cpu
          - memory
        metrics:
          k8s.pod.status_reason:
            enabled: true
        resource_attributes:
          k8s.kubelet.version:
            enabled: true
          os.description:
            enabled: true
          os.type:
            enabled: true
          k8s.container.status.last_terminated_reason:
            enabled: true
      httpcheck/frontendproxy:
        targets:
        - endpoint: http://example-frontendproxy:8080
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: ${env:MY_POD_IP}:4318
    service:
      extensions:
        - health_check
      pipelines:
        metrics/k8s:
          exporters:
          - debug
          - otlphttp/elastic
          processors:
          - k8sattributes
          - resourcedetection/eks
          - resourcedetection/gcp
          - resourcedetection/aks
          - resource/k8s
          - resource/hostname
          receivers:
          - k8s_cluster
        logs/k8s:
          receivers:
          - k8sobjects
          processors:
          - resourcedetection/eks
          - resourcedetection/gcp
          - resourcedetection/aks
          - resource/hostname
          exporters:
          - debug
          - otlphttp/elastic
        logs:
          exporters:
            - debug
            - otlphttp/elastic
            - signaltometrics
          processors:
            - batch
            - resource
          receivers:
            - otlp
        metrics:
          exporters:
            - otlphttp/elastic
            - signaltometrics
            - debug
          processors:
            - batch/metrics
            - resource
          receivers:
            - httpcheck/frontendproxy
            - otlp
            - spanmetrics
        traces:
          exporters:
            - otlphttp/elastic
            - debug
            - spanmetrics
            - signaltometrics
          processors:
            - transform/services
            - batch
            - elastictrace
            - resource
          receivers:
            - otlp
        metrics/aggregated-otel-metrics:
          receivers:
            - signaltometrics
          processors:
            - batch/aggs
            - lsminterval
          exporters:
            - debug
            - otlphttp/elastic
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888


opensearch:
  enabled: false

grafana:
  enabled: false

jaeger:
  enabled: false

prometheus:
  enabled: false
