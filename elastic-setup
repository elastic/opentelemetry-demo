#!/bin/bash

APP_NAME=my-otel-demo

# Define bash colors
# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

title () {
	echo -e ${Cyan}"<[${BBlue} $1 ${Cyan}]>${Color_Off}"
}

die () {
	echo -e "${BRed}ERROR: $1${Color_Off}"
	exit 1
}

title "Checking environment for $APP_NAME..."

# Check tools
tools=("helm" "kubectl" "minikube" "node" "npx")
for tool in ${tools[@]}; do
	if ! command -v $tool 2>&1 >/dev/null
	then
		die "Command '$tool' could not be found, please install"
	fi
done

if [ -z "${OTEL_EXPORTER_OTLP_ENDPOINT}" ]; then
  die "You must set OTEL_EXPORTER_OTLP_ENDPOINT to a valid URL!"
fi
if [ -z "${OTEL_EXPORTER_OTLP_HEADERS}" ]; then
  die "You must set authorization headers for OTEL beginnig with Authorization="
fi

if [[ $OTEL_EXPORTER_OTLP_HEADERS == "Authorization=*" ]]; then
  die "OTEL_EXPORTER_OTLP_HEADERS has invalid value \"$OTEL_EXPORTER_OTLP_HEADERS\", should start with Authorization="
fi

if [ -z "${OTEL_DEMO_ES_ENDPOINT}" ]; then
  die "You must set OTEL_DEMO_ES_ENDPOINT to a valid Elasticsearch URL"
fi

if [ -z "${OTEL_DEMO_ES_API_KEY}" ]; then
  die "You must set OTEL_DEMO_ES_API_KEY"
fi

if [ -z "${OTEL_DEMO_FLEET_URL}" ]; then
  die "You must set OTEL_DEMO_FLEET_URL"
fi

if [ -z "${OTEL_DEMO_FLEET_ENROLLMENT_TOKEN}" ]; then
  die "You must set OTEL_DEMO_FLEET_ENROLLMENT_TOKEN"
fi

if [ -z "${SYNTHETICS_API_KEY}" ]; then
  die "You must set SYNTHETICS_API_KEY"
fi

if [ -z "${KIBANA_URL}" ]; then
  die "You must set KIBANA_URL"
fi

if minikube status | grep -q "Running"; then
	title "Minikube is already running, skipping..."
else
	title "Minikube is not running, starting..."
	minikube start --ports=80:80,443:443 --memory=10g --cpus=4
	minikube addons enable ingress
fi

# Check that current kubernetes context is 'minikube'
if ! kubectl config current-context | grep -q "minikube"
then
	die "Current kubernetes context is not 'minikube', please switch to minikube by running: kubectl config use-context minikube"
fi

OTEL_ENDPOINT_NO_PROTO=`echo $OTEL_EXPORTER_OTLP_ENDPOINT | sed -r -e 's/^https?:\/\///'`
OTEL_AUTH_VALUE=`echo $OTEL_EXPORTER_OTLP_HEADERS | cut -d= -f2-`

kubectl delete secret elastic-secret 
kubectl create secret generic elastic-secret \
  --from-literal=elastic_apm_endpoint="$OTEL_ENDPOINT_NO_PROTO" \
  --from-literal=elastic_apm_secret_token="$OTEL_AUTH_VALUE"

kubectl delete secret elastic-secret-ds
kubectl create secret generic elastic-secret-ds \
  --from-literal=elastic_endpoint="$OTEL_DEMO_ES_ENDPOINT" \
  --from-literal=elastic_api_key="$OTEL_DEMO_ES_API_KEY" \
  --from-literal=fleet_url="$OTEL_DEMO_FLEET_URL" \
  --from-literal=fleet_enrollment_token="$OTEL_DEMO_FLEET_ENROLLMENT_TOKEN"

title "Installing/Upgrading helm charts for $APP_NAME..."
pushd kubernetes/elastic-helm
helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
helm repo update open-telemetry

# Install or upgrade helm chart
helminst () {
	hcommand=upgrade
	if ! helm status $1 2>&1 > /dev/null;
	then
		echo "$1 not yet installed by helm, will install"
		hcommand=install
	else
		echo "$1 already installed, upgrading"
	fi
	helm $hcommand $@
}

title "Installing $APP_NAME helm chart"
helminst $APP_NAME -f deployment.yaml $1 open-telemetry/opentelemetry-demo
title "Installing daemonset helm chart"
helminst otel-daemonset open-telemetry/opentelemetry-collector --values daemonset.yaml  

# Check if dns entry for otel-demo.internal exists
if ! grep -q "otel-demo.internal" /etc/hosts
then
	die 'otel-demo.internal missing from /etc/hosts, please add: "127.0.0.1 otel-demo.internal" to /etc/hosts'
else
	title "otel-demo.internal already in /etc/hosts!"
fi

title "Waiting for kubectl pods to finish initializing..."
# Get the status of all pods in the namespace and grep for "ContainerCreating" or "PodInitializing"
while kubectl get pods --all-namespaces | grep -q -E "ContainerCreating|PodInitializing"; do
	ini "npx"tializing=`kubectl get pods --all-namespaces | grep -E "ContainerCreating|PodInitializing" | wc -l | xargs`
	echo "Waiting for $initializing pods to finish initializing..."
	sleep 5
done

title "Installing nginx ingress"
helminst nginx-ingress ./ingress

title "Installing synthetics agent"
helminst otel-synthetics-agent ./otel-synthetics

title "Pushing Synthetics project..."
popd
cd synthetic-monitors
npm install
npx @elastic/synthetics push . --params '{"url": "http://ingress-nginx-controller.ingress-nginx.svc.cluster.local"}'


title "Setup complete!"
cat <<-EOF
You may access the demo at http://otel-demo.internal
EOF